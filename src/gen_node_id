#!/usr/bin/env python3
# xlattice_py/gen_node_id.py

"""
Use the contents of a subdirectory in U to generate an SHA hash.

If for example U is /var/U and the subdirectory is 'ff', then all of the
files below /var/U/ff will be walked in creating the hash.

Either an SHA1, or an SHA2 (SHA-256), or an SHA3 (SHA3-256) hash may be
selected.
"""

import getopt
import io
import os
import re
import sys
import hashlib
from random import randint
from argparse import ArgumentParser

from optionz import dump_options
from xlattice import(__version__, __version_date__, HashTypes,
                     check_hashtype, fix_hashtype, parse_hashtype_etc)

from xlattice.u import ULock

if sys.version_info < (3, 6):
    # pylint: disable=unused-import
    import sha3


def get_node_id(options):
    """ Generate a nodeID based on the hash of a UDir subdirectory. """
    hashtype = options.hashtype

    if hashtype == HashTypes.SHA1:
        sha = hashlib.sha1()
    elif hashtype == HashTypes.SHA2:
        sha = hashlib.sha256()
    elif hashtype == HashTypes.SHA3:
        # pylint: disable=no-member
        sha = hashlib.sha3_256()
    sub_dir = "%s/%s" % (options.u_path, options.sub_dir)
    for root, _, files in os.walk(sub_dir):
        for name in files:
            abs_path = os.path.join(root, name)
            try:
                file = io.FileIO(abs_path, "r")
                reader = io.BufferedReader(file)
                while True:
                    byte_str = reader.read(io.DEFAULT_BUFFER_SIZE)
                    if len(byte_str) == 0:
                        break
                    sha.update(byte_str)
            except Exception as exc:
                print(
                    "unexpected exception reading %s: %s" %
                    (abs_path, str(exc)))
                # otherwise we just ignore it

    return sha.hexdigest()        # a string


def main():
    """ Collect options from the command line and carry out the command. """

    desc = 'generate a quasi-random node ID for U based on contents of a subdirectory'
    parser = ArgumentParser(description=desc)

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show options and exit')

    parser.add_argument('-o', '--out_path', type=str,
                        help='destination directory')

    parser.add_argument(
        '-s', '--sub_dir',
        default=str("%02x" % randint(0, 0xff)),
        help='subdirectory to use for hashing (00 through ff)')

    parse_hashtype_etc(parser)     # -{1,2,3}, -u, -v

    args = parser.parse_args()

    fix_hashtype(args)
    check_hashtype(args.hashtype)

    # fixups --------------------------------------------------------
    sub_dir = args.sub_dir
    if not re.match("^[0-9a-fA-F]{2}$", sub_dir):
        print("subDir '%s' should be a two-digit hex number" % sub_dir)
        parser.print_help()
        sys.exit()
    args.sub_dir = sub_dir.lower()

    # sanity checks -------------------------------------------------

    if not args.u_path or not os.path.exists(args.u_path):
        print("input directory '%s' does not exist" % args.u_path)
        parser.print_help()
        sys.exit(1)

    if args.out_path and not os.path.exists(args.out_path):
        print("output directory '%s' does not exist" % args.out_path)
        parser.print_help()
        sys.exit(1)

    # complete setup ------------------------------------------------
    app_name = 'gen_node_id %s' % __version__

    # maybe show options and such -----------------------------------
    if args.verbose or args.just_show:
        print("%s %s" % (app_name, __version_date__))
        print(dump_options(args))

    if args.just_show:
        sys.exit(0)

    # do what's required --------------------------------------------
    lock = ULock(args.u_path)
    try:
        lock.get_lock()
        node_id = get_node_id(args)
        print(node_id)
    finally:
        lock.release_lock()


if __name__ == '__main__':
    main()
